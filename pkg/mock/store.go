// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ngenohkevin/ark-realtors/internal/store (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination pkg/mock/store.go github.com/ngenohkevin/ark-realtors/internal/store Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/ngenohkevin/ark-realtors/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatePictures mocks base method.
func (m *MockStore) CreatePictures(arg0 context.Context, arg1 db.CreatePicturesParams) (db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePictures", arg0, arg1)
	ret0, _ := ret[0].(db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePictures indicates an expected call of CreatePictures.
func (mr *MockStoreMockRecorder) CreatePictures(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePictures", reflect.TypeOf((*MockStore)(nil).CreatePictures), arg0, arg1)
}

// CreateProperty mocks base method.
func (m *MockStore) CreateProperty(arg0 context.Context, arg1 db.CreatePropertyParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProperty", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockStoreMockRecorder) CreateProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockStore)(nil).CreateProperty), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeletePictures mocks base method.
func (m *MockStore) DeletePictures(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePictures", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePictures indicates an expected call of DeletePictures.
func (mr *MockStoreMockRecorder) DeletePictures(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePictures", reflect.TypeOf((*MockStore)(nil).DeletePictures), arg0, arg1)
}

// DeleteProperty mocks base method.
func (m *MockStore) DeleteProperty(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockStoreMockRecorder) DeleteProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockStore)(nil).DeleteProperty), arg0, arg1)
}

// GetPictures mocks base method.
func (m *MockStore) GetPictures(arg0 context.Context, arg1 uuid.UUID) (db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPictures", arg0, arg1)
	ret0, _ := ret[0].(db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPictures indicates an expected call of GetPictures.
func (mr *MockStoreMockRecorder) GetPictures(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPictures", reflect.TypeOf((*MockStore)(nil).GetPictures), arg0, arg1)
}

// GetProperty mocks base method.
func (m *MockStore) GetProperty(arg0 context.Context, arg1 uuid.UUID) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperty", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperty indicates an expected call of GetProperty.
func (mr *MockStoreMockRecorder) GetProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperty", reflect.TypeOf((*MockStore)(nil).GetProperty), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListProperties mocks base method.
func (m *MockStore) ListProperties(arg0 context.Context, arg1 db.ListPropertiesParams) ([]db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProperties indicates an expected call of ListProperties.
func (mr *MockStoreMockRecorder) ListProperties(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProperties", reflect.TypeOf((*MockStore)(nil).ListProperties), arg0, arg1)
}

// UpdatePictures mocks base method.
func (m *MockStore) UpdatePictures(arg0 context.Context, arg1 db.UpdatePicturesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePictures", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePictures indicates an expected call of UpdatePictures.
func (mr *MockStoreMockRecorder) UpdatePictures(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePictures", reflect.TypeOf((*MockStore)(nil).UpdatePictures), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockStore) UpdateProperty(arg0 context.Context, arg1 db.UpdatePropertyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockStoreMockRecorder) UpdateProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockStore)(nil).UpdateProperty), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
