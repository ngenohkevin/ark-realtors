// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: property.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO property (id, type, price, status, bedroom, bathroom, location, size, contact)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, type, price, status, bedroom, bathroom, location, size, contact, created_at
`

type CreatePropertyParams struct {
	ID       uuid.UUID      `json:"id"`
	Type     string         `json:"type"`
	Price    pgtype.Numeric `json:"price"`
	Status   string         `json:"status"`
	Bedroom  int32          `json:"bedroom"`
	Bathroom int32          `json:"bathroom"`
	Location string         `json:"location"`
	Size     string         `json:"size"`
	Contact  string         `json:"contact"`
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRow(ctx, createProperty,
		arg.ID,
		arg.Type,
		arg.Price,
		arg.Status,
		arg.Bedroom,
		arg.Bathroom,
		arg.Location,
		arg.Size,
		arg.Contact,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Price,
		&i.Status,
		&i.Bedroom,
		&i.Bathroom,
		&i.Location,
		&i.Size,
		&i.Contact,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProperty = `-- name: DeleteProperty :exec
DELETE FROM property WHERE id = $1
`

func (q *Queries) DeleteProperty(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProperty, id)
	return err
}

const getProperty = `-- name: GetProperty :one
SELECT id, type, price, status, bedroom, bathroom, location, size, contact, created_at FROM property WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProperty(ctx context.Context, id uuid.UUID) (Property, error) {
	row := q.db.QueryRow(ctx, getProperty, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Price,
		&i.Status,
		&i.Bedroom,
		&i.Bathroom,
		&i.Location,
		&i.Size,
		&i.Contact,
		&i.CreatedAt,
	)
	return i, err
}

const listProperties = `-- name: ListProperties :many
SELECT id, type, price, status, bedroom, bathroom, location, size, contact, created_at FROM property
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPropertiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProperties(ctx context.Context, arg ListPropertiesParams) ([]Property, error) {
	rows, err := q.db.Query(ctx, listProperties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Property{}
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Price,
			&i.Status,
			&i.Bedroom,
			&i.Bathroom,
			&i.Location,
			&i.Size,
			&i.Contact,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :exec
UPDATE property
SET type = $2,
    price = $3,
    status = $4,
    bedroom = $5,
    bathroom = $6,
    location = $7,
    size = $8,
    contact = $9
WHERE id = $1
RETURNING id, type, price, status, bedroom, bathroom, location, size, contact, created_at
`

type UpdatePropertyParams struct {
	ID       uuid.UUID      `json:"id"`
	Type     string         `json:"type"`
	Price    pgtype.Numeric `json:"price"`
	Status   string         `json:"status"`
	Bedroom  int32          `json:"bedroom"`
	Bathroom int32          `json:"bathroom"`
	Location string         `json:"location"`
	Size     string         `json:"size"`
	Contact  string         `json:"contact"`
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) error {
	_, err := q.db.Exec(ctx, updateProperty,
		arg.ID,
		arg.Type,
		arg.Price,
		arg.Status,
		arg.Bedroom,
		arg.Bathroom,
		arg.Location,
		arg.Size,
		arg.Contact,
	)
	return err
}
